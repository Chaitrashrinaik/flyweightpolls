import React from "react";
import { useNavigate } from "react-router-dom";
import Button from '@mui/material/Button';

const CreatePollBtn = () => {
  const navigate = useNavigate();

  return (
    <Button
      variant="contained"
      className="create-poll-btn"
      onClick={() => navigate('/Create-poll')}
      style={{
        width: '200%',
        marginBottom: '10px',
        padding: '10px',
      }}
    >
      Create Poll
    </Button>
  );
};
export default CreatePollBtn;

import React, { useContext } from "react";
import { TagsContext } from "../TagsContext";
import Button from '@mui/material/Button';

const Filter = () => {
  const { selectedTags, setSelectedTags, allTags } = useContext(TagsContext);

  const handleTagChange = (tag) => {
    setSelectedTags(prevTags =>
      prevTags.includes(tag)
        ? prevTags.filter(t => t !== tag)
        : [...prevTags, tag]
    );
  };

  return (
    <div className="sidebar">
      <Button
        variant="contained"
        className="create-poll-btn"
        onClick={() => navigate('/Create-poll')}
      >
        Create Poll
      </Button>
      <div className="tag-list">
        {allTags.map(tag => (
          <label key={tag} className="tag-item">
            <input
              type="checkbox"
              checked={selectedTags.includes(tag)}
              onChange={() => handleTagChange(tag)}
            />
            {tag}
          </label>
        ))}
      </div>
      <Button
        variant="outlined"
        className="filter-tags-btn"
        onClick={() => console.log('Filtering by tags:', selectedTags)}
      >
        Filter by Tags
      </Button>
    </div>
  );
};

export default Filter;

import React from 'react';

const Header = () => {
  return (
    <header>
      <h1 >FlyWeight Polls</h1>
    </header>
  );
};

export default Header;

import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import MainContent from "./Maincontent";

const Home = () => {
  const navigate = useNavigate();
  const [questions, setQuestions] = useState([]);

  useEffect(() => {
    fetch("http://127.0.0.1:8000/api/questions")
      .then((response) => response.json())
      .then((data) => setQuestions(data))
      .catch((error) => console.error("Error fetching questions:", error));
  }, []);

  const handleClick = (id) => {
    navigate(`/poll-detail?id=${id}`);
  };

  return (
    <div style={{ display: "flex" }}>
      <MainContent />
      <div>
        {qu

estions.map((question) => (
          <div key={question.id} onClick={() => handleClick(question.id)}>
            {question.text}
          </div>
        ))}
      </div>
    </div>
  );
};

export default Home;

.main-content {
  width: 100%;
  padding: 20px;
  margin-top: -1rem;
  margin-left:2rem !important;
}

.grid-container {
  display: grid;
  grid-template-columns: -0.2fr 0.2fr;
  gap: 1px !important;


}

.sidebar-container {
  grid-row: 1 / 3;
}

.polls-container {
  grid-column: 2;
  grid-row: 1 / 3;
  margin-left: -4rem;
}
(MainContent.css)

import React from "react";
import "./MainContent.css";
import PollsTable from "./Polltable";
import Sidebar from "./Sidebar";

const MainContent = () => {
  return (
    <div className="main-content">
      <div className="grid-container">
        <div className="sidebar-container">
          <Sidebar />
        </div>
        <div className="polls-container">
          <PollsTable />
        </div>
      </div>
    </div>
  );
};

export default MainContent;


import React, { useEffect, useState, useContext } from "react";
import { useNavigate } from "react-router-dom";
import { TagsContext } from "../TagsContext";
import { DataGrid } from "@mui/x-data-grid";
import "./MainContent.css";

const PollsTable = () => {
  const [polls, setPolls] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { selectedTags } = useContext(TagsContext);

  useEffect(() => {
    const fetchPolls = async () => {
      try {
        let url = "http://127.0.0.1:8000/polls/";
        if (selectedTags.length > 0) {
          url += `?tags=${selectedTags.join(",")}`;
        }
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const data = await response.json();
        setPolls(data.data || []);
      } catch (error) {
        console.error("Error fetching polls:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchPolls();
  }, [selectedTags]);

  const handleQuestionClick = (id) => {
    navigate(`/poll-detail?id=${id}`);
  };

  if (loading) return <div>Loading...</div>;

  const columns = [
    { field: 'id', headerName: 'Number', width: 70 },
    { field: 'question', headerName: 'Poll Question', flex: 2 },
    { field: 'totalVotes', headerName: 'Total Votes', width: 100 },
    { field: 'tags', headerName: 'Tags', flex: 1 }
  ];

  const rows = polls.map((poll, index) => ({
    id: index + 1,
    question: poll.Question,
    totalVotes: Object.values(poll.OptionVote).reduce((a, b) => a + b, 0),
    tags: poll.Tags.join(", "),
    questionID: poll.QuestionID
  }));

  const handleRowClick = (params) => {
    handleQuestionClick(params.row.questionID);
  };

  return (
    <div className="polls-table">
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        rowsPerPageOptions={[5, 10, 20]}
        onRowClick={handleRowClick}
        autoHeight
        disableSelectionOnClick
      />
    </div>
  );
};

export default PollsTable;

.sidebar {
  flex: 0 0 250px;
  padding: 20px;
  text-align: left;
  box-sizing: border-box;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
  margin-left: -20rem;
}

.create-poll-btn{
  margin-left: -19rem !important;
  display: block;
  width: 100rem;
  margin-bottom: 10px;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  cursor: pointer;
  text-align: center;
  border-radius: 9px !important;
  transition: background-color 0.3s;
  
}
.filter-tags-btn {
  display: block;
  width: 100%;
  margin-bottom: 10px;
  padding: 10px;
  background-color: transparent;
  color: #007bff;
  border: 1px solid #007bff;
  cursor: pointer;
  text-align: center;
  border-radius: 5px;
  transition: background-color 0.3s, color 0.3s;
}

.create-poll-btn:hover,
.filter-tags-btn:hover {
  background-color: #007bff;
  color: #fff;
}

.tag-list {
  display: flex;
  flex-direction: column;
}

.tag-item {
  margin-bottom: 5px;
}
(sidebar.css)

import React, { useContext, useEffect, useState } from 'react';
import { TagsContext } from '../TagsContext';
import { useNavigate } from 'react-router-dom';
import Button from '@mui/material/Button';
import './Sidebar.css';

const Sidebar = () => {
  const { selectedTags, setSelectedTags } = useContext(TagsContext);
  const [allTags, setAllTags] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    fetchTags();
  }, []);

  const fetchTags = async () => {
    try {
      const response = await fetch('http://127.0.0.1:8000/polls/tags/');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      setAllTags(data.data || []);
    } catch (error) {
      console.error('Error fetching tags:', error);
    }
  };

  const handleTagChange = (tag) => {
    setSelectedTags((prevTags) =>
      prevTags.includes(tag) ? prevTags.filter((t) => t !== tag) : [...prevTags, tag]
    );
  };

  const handleFilterByTags = () => {
    console.log('Filtering by tags:', selectedTags);
  };

  return (
    <div className="container">
      <Button
        variant="contained"
        className="create-poll-btn"
        onClick={() => navigate('/Create-poll')}
      >
        Create Poll
      </Button>

      <div className="sidebar">
        <div className="tag-list">
          {allTags.length > 0 ? (
            allTags.map((tag) => (
              <label key={tag} className="tag-item">
                <input
                  type="checkbox"
                  checked={selectedTags.includes(tag)}
                  onChange={() => handleTagChange(tag)}
                />
                {tag}
              </label>
            ))
          ) : (
            <p>No tags available</p>
          )}
        </div>

        <Button
          variant="outlined"
          className="filter-tags-btn"
          onClick={handleFilterByTags}
        >
          Filter by Tags
        </Button>
      </div>
    </div>
  );
};

export default Sidebar;


.sidebar {
  flex: 0 0 250px; /* Increased width */
  padding: 20px;
  text-align: left;
  box-sizing: border-box;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}

.create-poll-btn,
.filter-tags-btn {
  display: block;
  width: 100%;
  margin-bottom: 10px;
  padding: 10px;
  background-color: transparent;
  color: #007bff;
  border: 1px solid #007bff;
  cursor: pointer;
  text-align: center;
  border-radius: 5px;
  transition: background-color 0.3s, color 0.3s;
}

.create-poll-btn:hover,
.filter-tags-btn:hover {
  background-color: #007bff;
  color: #fff;
}

.tag-list {
  display: flex;
  flex-direction: column;
  padding: 15px 0;
}

.tag-item {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  margin-left: -90px;
}

.tag-item input[type="checkbox"] {
  margin-right: 5px;
}
.tag-list {
  display: flex;
  flex-wrap: wrap;
  padding: 15px 0;
}

.tag-column {
  display: flex;
  flex-direction: column;
  margin-right: 20px;
}

.tag-item {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.tag-item input[type="checkbox"] {
  margin-right: 5px;
}(styles.css)

import React, { createContext, useState } from 'react';

export const TagsContext = createContext();

export const TagsProvider = ({ children }) => {
  const [selectedTags, setSelectedTags] = useState([]);
  const [allTags, setAllTags] = useState(['football', 'sports', 'cricket', 'chess', 'carrom']); // Default tags

  console.log('All Tags:', allTags);
  console.log('Selected Tags:', selectedTags);

  return (
    <TagsContext.Provider value={{ selectedTags, setSelectedTags, allTags, setAllTags }}>
      {children}
    </TagsContext.Provider>
  );
};







